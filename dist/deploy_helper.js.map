{"version":3,"sources":["../src/deploy_helper.js"],"names":["CF_INVALIDATE_WAIT_TIME_MS","DeployHelper","env","_runCommands","Project","build","console","log","cmd","upload","accessKey","secretKey","buckets","Execa","shell","stdio","cloudfront","dist","stdout","stderr","error","parsed","JSON","parse","invalidationId","Invalidation","Id","status","Status","Promise","resolve","setTimeout","urls","finally","label","cmds","length","_","startsWith","NODE_ENV"],"mappings":"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","file":"deploy_helper.js","sourcesContent":["import _ from 'lodash';\nimport Execa from 'execa';\nimport Project from './project';\n\nconst CF_INVALIDATE_WAIT_TIME_MS = 2000;\n\nclass DeployHelper {\n  static async deploy(env) {\n    try {\n      await this._runCommands(env, \"Building\", Project.build);\n\n      console.log(`Syncing to S3...`);\n      const cmd = `cd ${Project.upload} && env AWS_ACCESS_KEY_ID=\"${Project.accessKey}\" AWS_SECRET_ACCESS_KEY=\"${Project.secretKey}\" aws s3 sync . s3://${Project.buckets[env]} --delete --cache-control max-age=31536000,public`;\n      console.log(`> ${cmd}`);\n      await Execa.shell(cmd, { stdio: [0, 1, 2] });\n\n      if (Project.cloudfront && Project.cloudfront[env]) {\n        const dist = Project.cloudfront[env];\n        console.log(`Invalidating cache ${dist}...`);\n        let { stdout, stderr } = await Execa.shell(`cd ${Project.upload} && env AWS_ACCESS_KEY_ID=\"${Project.accessKey}\" AWS_SECRET_ACCESS_KEY=\"${Project.secretKey}\" aws cloudfront create-invalidation --distribution-id ${dist} --paths \\\"/*\\\"`);\n        if (stderr) { console.error(stderr); }\n        let parsed = JSON.parse(stdout);\n        const invalidationId = parsed.Invalidation.Id;\n        let status = parsed.Invalidation.Status;\n        if (status != \"Completed\") {\n          while (status != \"Completed\") {\n            console.log(`  status ${status}`);\n            await new Promise((resolve)=>{\n              setTimeout(()=>{ resolve(); }, CF_INVALIDATE_WAIT_TIME_MS);\n            });\n            let { stdout, stderr } = await Execa.shell(`cd ${Project.upload} && env AWS_ACCESS_KEY_ID=\"${Project.accessKey}\" AWS_SECRET_ACCESS_KEY=\"${Project.secretKey}\" aws cloudfront get-invalidation --distribution-id ${dist} --id ${invalidationId}`);\n            if (stderr) { console.error(stderr); }\n            parsed = JSON.parse(stdout);\n            status = parsed.Invalidation.Status;\n          }\n          console.log(`  status ${status}`);\n        }\n      }\n\n      if (Project.urls && Project.urls[env]) {\n        console.log(`Prewarming cache on ${Project.urls[env]}...`);\n        await Execa.shell(`mkdir -p tmp/prewarmcache && wget -nd -r -P tmp/prewarmcache -A jpeg,jpg,bmp,gif,png ${Project.urls[env]} && rm -rf tmp/prewarmcache`, { stdio: [0, 1, 2] });\n      }\n\n    } finally {\n      await this._runCommands(env, \"Finally\", Project.finally);\n    }\n  }\n\n  static async _runCommands(env, label, cmds) {\n    if (cmds && cmds.length > 0) {\n      console.log(`${label}...`);\n      for (let cmd of cmds) {\n        if (_.startsWith(cmd, \"//\")) {\n          console.log(`skipping: ${cmd}`);\n          continue;\n        }\n        console.log(`> ${cmd}`);\n        await Execa.shell(cmd, {\n          env: { env, NODE_ENV: env },\n          stdio: [0, 1, 2],\n        });\n      }\n    }\n  }\n}\n\nexport default DeployHelper;\n"]}